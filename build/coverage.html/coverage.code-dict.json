{"/home/travis/build/npmtest/node-npmtest-synchronize/test.js":"/* istanbul instrument in package npmtest_synchronize */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-synchronize/lib.npmtest_synchronize.js":"/* istanbul instrument in package npmtest_synchronize */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_synchronize = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_synchronize = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-synchronize/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-synchronize && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_synchronize */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_synchronize\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_synchronize.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_synchronize.rollup.js'] =\n            local.assetsDict['/assets.npmtest_synchronize.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_synchronize.__dirname + '/lib.npmtest_synchronize.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-synchronize/node_modules/synchronize/sync.js":"/*jshint node: true, indent:2, loopfunc: true, asi: true, undef:true*/\n\nvar Fiber = require('fibers')\n\n// Takes function and returns its synchronized version, it's still backward compatible and\n// can be used as asynchronous `syncFn = sync(asyncFn)`.\n//\n// Or You can provide object and it will synchronize its functions `sync(obj, fname1, fname2, ...)`.\n//\n// New synchronized version of function is backward compatible and You may call it as usual with\n// explicit callback or inside of `fiber` with `aware` and `defer` keywords.\nvar sync = module.exports = function(){\n  if(arguments.length > 1){\n    // Synchronizing functions of object.\n    var obj = arguments[0]\n    for(var i = 1; i < arguments.length; i++){\n      var fname = arguments[i]\n      var fn = obj[fname]\n      if(!fn) throw new Error(\"object doesn't have '\" + fname + \"' function!\")\n      obj[fname] = sync(fn)\n    }\n  }else{\n    return sync.syncFn(arguments[0])\n  }\n}\n\nvar nextTick = global.setImmediate || process.nextTick || function(cb) { setTimeout(cb, 0) }\n\n// Sometimes `Fiber` needed outside of `sync`.\nsync.Fiber = Fiber\n\n// Takes function and returns its synchronized version, it's still backward compatible and can\n// be used as asynchronous.\nsync.syncFn = function(fn){\n  // Preventing function to be synchronized twice.\n  if(fn._synchronized) return fn\n\n  var syncFn = function(){\n    // Using fibers only if there's active fiber and callback not provided explicitly.\n    if(Fiber.current && (typeof arguments[arguments.length-1] !== 'function')){\n      // Calling asynchronous function with our special fiber-aware callback.\n      Array.prototype.push.call(arguments, sync.defer())\n      fn.apply(this, arguments)\n\n      // Waiting for asynchronous result.\n      return sync.await()\n    }else{\n      // If there's no active fiber or callback provided explicitly we call original version.\n      return fn.apply(this, arguments)\n    }\n  }\n\n  // Marking function as synchronized.\n  syncFn._synchronized = true\n\n  return syncFn\n}\n// Use it to wait for asynchronous callback.\nsync.await = Fiber.yield\n\n// Creates fiber-aware asynchronous callback resuming current fiber when it will be finished.\nsync.defer = function(){\n  if(!Fiber.current) throw new Error(\"no current Fiber, defer can't be used without Fiber!\")\n  if(Fiber.current._syncParallel) return sync.deferParallel()\n  else return sync.deferSerial()\n}\n\n// Exactly the same as defer, but additionally it triggers an error if there's no response\n// on time.\nsync.deferWithTimeout = function(timeout, message){\n  if(!Fiber.current) throw new Error(\"no current Fiber, deferWithTimeout can't be used without Fiber!\")\n  if(!timeout) throw new Error(\"no timeout provided!\")\n  if(Fiber.current._syncParallel) throw new Error(\"deferWithTimeout can't be used in parallel!\")\n\n  var defer = this.defer()\n  var error = new Error(message || \"defer timed out!\")\n  var called = false\n  var d = setTimeout(function(){\n    if(called) return\n    called = true\n    defer(error)\n  }, timeout)\n\n  return function(){\n    if(called) return\n    called = true\n    clearTimeout(d)\n    return defer.apply(this, arguments)\n  }\n}\n\n//\nsync.deferSerial = function(){\n  var fiber = Fiber.current\n  if(!fiber) throw new Error(\"no current Fiber, defer can't be used without Fiber!\")\n  // if(fiber._defered) throw new Error(\"invalid usage, should be clear previous defer!\")\n  // fiber._defered = true\n  // Prevent recursive call\n  var called = false\n  // Returning asynchronous callback.\n  return function(err, result){\n    if (called) throw new Error(\"defer can't be used twice!\")\n    called = true\n\n    // Wrapping in nextTick as a safe measure against not asynchronous usage.\n    nextTick(function(){\n      // fiber._defered = false\n      if(fiber._syncIsTerminated) return\n      if(err){\n        // Resuming fiber and throwing error.\n        fiber.throwInto(err)\n      }else{\n        // Resuming fiber and returning result.\n        fiber.run(result)\n      }\n    })\n  }\n}\n\nsync.deferParallel = function(){\n  var fiber = Fiber.current\n  if(!fiber) throw new Error(\"no current Fiber, defer can't be used without Fiber!\")\n  if(!fiber._syncParallel) throw new Error(\"invalid usage, should be called in parallel mode!\")\n  var data = fiber._syncParallel\n\n  // Counting amount of `defer` calls.\n  data.called += 1\n  var resultIndex = data.called - 1\n\n  // Returning asynchronous callback.\n  return function(err, result){\n    // Wrapping in nextTick as a safe measure against not asynchronous usage.\n    nextTick(function(){\n      if(fiber._syncIsTerminated) return\n      // Error in any of parallel call will result in aborting all of the calls.\n      if(data.errorHasBeenThrown) return\n      if(err){\n        data.errorHasBeenThrown = true\n        // Resuming fiber and throwing error.\n        fiber.throwInto(err)\n      }else{\n        data.returned += 1\n        data.results[resultIndex] = result\n        // Resuming fiber and returning result when all callbacks finished.\n        if(data.returned == data.called) fiber.run(data.results)\n      }\n    })\n  }\n}\n\nsync.defers = function(){\n  if(!Fiber.current) throw new Error(\"no current Fiber, defer can't be used without Fiber!\")\n  if(Fiber.current._syncParallel) return sync.defersParallel.apply(sync, arguments)\n  else return sync.defersSerial.apply(sync, arguments)\n}\n\nsync.defersSerial = function(){\n  var fiber = Fiber.current;\n  if(!fiber) throw new Error(\"no current Fiber, defer can't be used without Fiber!\")\n  // if(fiber._defered) throw new Error(\"invalid usage, should be clear previous defer!\")\n  // fiber._defered = true\n\n  var kwds = Array.prototype.slice.call(arguments)\n\n  // Prevent recursive call\n  var called = false\n  // Returning asynchronous callback.\n  return function(err) {\n    if (called) throw new Error(\"defer can't be used twice!\")\n    called = true\n    // Wrapping in nextTick as a safe measure against not asynchronous usage.\n    var args = Array.prototype.slice.call(arguments, 1)\n    nextTick(function(){\n      // fiber._defered = false\n      if(fiber._syncIsTerminated) return\n      if (err) {\n        // Resuming fiber and throwing error.\n        fiber.throwInto(err)\n      } else {\n        var results;\n        if(!kwds.length){\n          results = args\n        } else {\n          results = {}\n          kwds.forEach(function(kwd, i){\n            results[kwd]=args[i]\n          })\n        }\n        fiber.run(results)\n      }\n    })\n  }\n}\n\nsync.defersParallel = function(){\n  var fiber = Fiber.current\n  if(!fiber) throw new Error(\"no current Fiber, defer can't be used without Fiber!\")\n  if(!fiber._syncParallel) throw new Error(\"invalid usage, should be called in parallel mode!\")\n  var data = fiber._syncParallel\n  // Counting amount of `defer` calls.\n  data.called += 1\n  var resultIndex = data.called - 1\n\n  var kwds = Array.prototype.slice.call(arguments)\n  // Returning asynchronous callback.\n  return function(err) {\n    // Wrapping in nextTick as a safe measure against not asynchronous usage.\n    var args = Array.prototype.slice.call(arguments, 1)\n    nextTick(function(){\n      if(fiber._syncIsTerminated) return\n\n      // Error in any of parallel call will result in aborting all of the calls.\n      if(data.errorHasBeenThrown) return\n      if (err) {\n        data.errorHasBeenThrown = true\n        // Resuming fiber and throwing error.\n        fiber.throwInto(err)\n      }\n      var results;\n      if(!kwds.length){\n        results = args\n      } else {\n        results = {}\n        kwds.forEach(function(kwd, i){\n          results[kwd]=args[i]\n        })\n      }\n      data.returned += 1\n      data.results[resultIndex] = results\n      if(data.returned == data.called) fiber.run(data.results)\n    })\n  }\n}\n\n// Support for parallel calls, all `defer` calls within callback will be\n// performed in parallel.\nsync.parallel = function(cb){\n  var fiber = Fiber.current\n  if(!fiber) throw new Error(\"no current Fiber, defer can't be used without Fiber!\")\n\n  // Enabling `defer` calls to be performed in parallel.\n  // There's an important note - error in any parallel call will result in aborting\n  // all of the parallel calls.\n  fiber._syncParallel = {called: 0, returned: 0, results: [], errorHasBeenThrown: false}\n  try{\n    cb.call(this)\n  }finally{\n    // If neither `defer` nor `defers` were called within the callback, we need\n    // to run the fiber ourselves or else the fiber will unwind when `await` is called.\n    // This might happen if the user intended to enumerate an array within the\n    // callback, calling `defer` once per array item, but the array was empty.\n    if (!fiber._syncParallel.called) {\n      nextTick(function(){\n        // Return an empty array to represent that there were no results.\n        if(!fiber._syncIsTerminated) fiber.run([])\n      })\n    }\n    delete fiber._syncParallel\n  }\n}\n\n// Executes `cb` within `Fiber`, when it finish it will call `done` callback.\n// If error will be thrown during execution, this error will be catched and passed to `done`,\n// if `done` not provided it will be just rethrown.\nsync.fiber = function(cb, done){\n  var that = this\n  var fiber = Fiber(function(){\n    // Prevent restart fiber\n    if (Fiber.current._started) return\n    if (done) {\n      var result\n      try {\n        result = cb.call(that)\n        Fiber.current._syncIsTerminated = true\n      } catch (error){\n        return done(error)\n      }\n      done(null, result)\n    } else {\n      // Don't catch errors if done not provided!\n      cb.call(that)\n      Fiber.current._syncIsTerminated = true\n    }\n  })\n  fiber.run()\n  fiber._started = true\n}\n\n// Asynchronous wrapper for mocha.js tests.\n//\n//   async = sync.asyncIt\n//   it('should pass', async(function(){\n//     ...\n//   }))\n//\nsync.asyncIt = function(cb){\n  if(!cb) throw \"no callback for async spec helper!\"\n  return function(done){sync.fiber(cb.bind(this), done)}\n}\n\n// Same as `sync` but with verbose logging for every method invocation.\n// Ignore this method, it shouldn't be used unless you want to track down\n// tricky and complex bugs and need full information abouth how and when all\n// this async stuff has been called.\nvar fiberIdCounter = 1\nsync.syncWithDebug = function(){\n  if(arguments.length > 1){\n    // Synchronizing functions of object.\n    var obj = arguments[0]\n    for(var i = 1; i < arguments.length; i++){\n      (function(fname){\n        var fn = obj[fname]\n        if(!fn) throw new Error(\"object doesn't have '\" + fname + \"' function!\")\n        var syncedFn = sync(fn)\n        obj[fname] = function(){\n          if(Fiber.current && Fiber.current._fiberId === undefined){\n            Fiber.current._fiberId = fiberIdCounter\n            fiberIdCounter = fiberIdCounter + 1\n            Fiber.current._callbackLevel = 0\n          }\n\n          var fiberId = '-'\n          if(Fiber.current){\n            fiberId = Fiber.current._fiberId\n            Fiber.current._callbackLevel = Fiber.current._callbackLevel + 1\n          }\n\n          var indent = '    '\n          if(Fiber.current)\n            for(var j = 0; j < Fiber.current._callbackLevel; j++) indent = indent + '  '\n\n          console.log(fiberId + indent + this.constructor.name + '.' +\n          fname + \" called\", JSON.stringify(arguments))\n\n          var result\n          try{\n            result = syncedFn.apply(this, arguments)\n          }finally{\n            console.log(fiberId + indent + this.constructor.name + '.' +\n            fname + \" finished\")\n\n            if(Fiber.current)\n              Fiber.current._callbackLevel = Fiber.current._callbackLevel - 1\n          }\n          return result\n        }\n      })(arguments[i])\n    }\n  }else{\n    return sync.syncFn(arguments[0])\n  }\n}\n"}